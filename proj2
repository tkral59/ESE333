#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<fcntl.h>
#include<unistd.h>
#include<sys/wait.h>

char* args[15]; //global array for arguments
int orflag = 0, irflag = 0, pflag = 0, bgflag = 0, cflag = 0; //global flags to show which operator is seen

/// <summary>
/// output redirection
/// </summary>
void outre(char** input, char** output) { //"echo "hello world" > file1.txt" will write hellow world into a txt file

    pid_t fpid;
    int status; //buffer for the status of child process [not necassary for us yet]
    fpid = fork();
    if (fpid < 0) {
        printf("Error in fork.");
    }
    else if (fpid == 0) {
        //child process
        int filedesc = open(*output, O_WRONLY | O_CREAT, 0777); //0777 give everyone all access
        dup2(filedesc, 1);
        /// <summary>
        /// filedes was a new integer that pointed to "*output" which the file we're writing to
        /// dup2 makes it so pointer 1 will no point to what filedesc is pointing to.
        /// originally 0 points to stdin, 1 points to stdout, and 2 points to stderr.
        /// effectivley anything that tries to write to stdout within this process will instead write to filedesc.
        /// </summary>
        if (filedesc < 0) {
            printf("Could not use file at output.");
            exit(0); //normally execvp exits for us
        }
        execvp(args[0], input);
        //exit(0);
    }
    else {
        waitpid(-1, &status, 0); //the parent process needs to wait for the child to finish, -1 indicates fpid [could also just write fpid], status buffer, 0 indicates no additional options
    }

}
/// <summary>
/// input redirection
/// similar to output redirection
/// </summary>
void inre(char** output, char** input) {//"./a.out < input.txt" take sthe output from a.out as an input and ouputs to input.txt
    pid_t fpid;
    int status;
    fpid = fork();
    if (fpid < 0) {
        printf("Error in fork.");
    }
    else if (fpid == 0) {
        int filedesc = open(*input, O_RDONLY, 0777);
        dup2(filedesc, 0); //this time we use zero to cause 0 to point to filedesc instead of stdin.
        if (filedesc < 0) {
            printf("File could not be used as input.");
            exit(0);
        }
        execvp(args[0], output);
    }
    else { waitpid(-1, &status, 0); }
}

/// <summary>
/// pipe
/// </summary>
void pipesim(char** ls, char** rs) {//"input | command"
    int fd[2];//here fd[0] becomes reading end, fd[1] becomes writing end
    if (pipe(fd) == -1) { printf("couldn't pipe fds.\n"); } //creating an actual pipe will allow communication between filedescriptors
    
    /// <summary>
    /// create child process number 1
    /// this will take care of getting the left side arguments to output to the pipe write side instead of stdout.
    /// </summary>
    int pid1 = fork();
    if (pid1 < 0) { printf("could not fork/n"); }
    else if (pid1 == 0) {
        dup2(fd[1], 1); //writes to WR side of pipe instead of stdout
        close(fd[0]);   //we need to close fd a lot since child processes open them another time on top of the parent
        close(fd[1]);
        execvp(ls[0], ls);
    }
    //waitpid(pid1, NULL, 0);
    
    /// <summary>
    /// create child process number 2
    /// we need to read from the pipe with fd[0] instead of stdin.
    /// </summary>
    int pid2 = fork();
    if (pid2 < 0) { printf("could not fork/n"); }
    else if (pid2 == 0) {
        dup2(fd[0], 0);
        close(fd[0]);
        close(fd[1]);
        execvp(rs[0], rs);
    }
    close(fd[0]); //here we are closing for when the parent opened these descriptors
    close(fd[1]);
    waitpid(pid1, NULL, 0);
    waitpid(pid2, NULL, 0);

}

/// <summary>
/// commands with '&' after can be run in the background, this way we can continue to use the terminal while something else runs
/// </summary>
void background(char** input) {//"action &" if this is done the action is run in the background and you can still activley type commands to shell. otherwise shell must wait for action to finish
    int fpid = fork();
    if (fpid < 0) { printf("fork failed.\n"); }
    else if (fpid == 0) {
        execvp(input[0], input);
    }
    //pretty straight forward, just creates a child process that we do not wait for
}

/// <summary>
/// prints current working directory
/// </summary>
void printDir() {
    char cwd[1024];
    getcwd(cwd, sizeof(cwd));
    printf("\nDir: %s: ", cwd);
}

int main() {
    /// <summary>
    /// here we start our infinite loop, constantly cycles through waiting for text from stdin and running needed functions
    /// </summary>
    while (1) {
        printDir();
        char text[100];
        memset(text, 0, 100); //gets rid of any possible junk left over from last iteration, safe measure
        fgets(text, 100, stdin);
        text[strlen(text) - 1] = 0; // = 0; gets rid of \n
        char* token = strtok(text, " "); // token to split string
        orflag = 0, irflag = 0, pflag = 0, bgflag = 0, cflag = 0; //reset our flags
        int op = 0; //index of where our operation is
        int size = 0; //count of strings in text
        for (int i = 0; token != NULL; i++) {
            args[i] = token;
            if (args[i][strlen(args[i]) - 1] == 10) { //10 == '\n'
                args[i][strlen(args[i]) - 1] = 0; //another safety measure, since we do this earlier
            }
            switch (*token) {
            case '>':
                orflag = 1; op = i;  break;
            case '<':
                irflag = 1; op = i; break;
            case '|':
                pflag = 1; op = i; break;
            case '&':
                bgflag = 1; op = i; break;
            }
            if (strcmp(*args, "cd") == 0) {
                cflag = 1;
            }
            token = strtok(NULL, " ");
            size++;
        }
        int rssize = size - op; //size of right side array
        //--------------------------------------creates left side array and right side array-------------------------------------------------------------------------------------------------------
        char* ls[op + 1]; //array of string on left side
        char* rs[rssize]; //array of strings on right side
        //they are given an extra element so that NULL can be added at the end, necassary for execvp
        int lsdex = 0, rsdex = 0;
        if (orflag == 1 || irflag == 1 || pflag == 1 || bgflag == 1 || cflag == 1) {
            for (int i = 0; i < size; i++) {
                if (i < op) {
                    ls[lsdex] = args[i];
                    lsdex++;
                }
                else if (i > op) {
                    rs[rsdex] = args[i];
                    rsdex++;
                }
                else {
                    ls[lsdex] = NULL; // this is done for execvp()
                }
            }
        }
        else {
            printf("Warning: No known functional symbols found\n");
            continue;
        }
        rs[rsdex] = NULL;
        //----------------------------------------operation directory-----------------------------------------------------------------------------------------------------
        if (orflag == 1)
            outre(ls, rs);
        else if (irflag == 1)
            inre(ls, rs);
        else if (pflag == 1)
            pipesim(ls, rs);
        else if (bgflag == 1)
            background(ls);
        else if (cflag == 1) {
            char cw[100];
            if (chdir(rs[0]) == -1) { printf("cd failed."); }
            else { printf("new directory is %s\n", getcwd(cw, 100)); }
        }

    }
}
